{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import board\n",
    "import neopixel_spi\n",
    "import time\n",
    "import busio\n",
    "import random\n",
    "\n",
    "#LED\n",
    "from colorsys import hls_to_rgb\n",
    "from collections import deque\n",
    "\n",
    "#Board\n",
    "from clcd.I2C_Charactor_Liquid_Crystal_Display import LCD\n",
    "from clcd.I2C_Device import *\n",
    "\n",
    "#Segments\n",
    "from adafruit_ht16k33 import segments\n",
    "\n",
    "i2c = busio.I2C(board.SCL, board.SDA)\n",
    "CLCD = LCD(i2c)\n",
    "\n",
    "CLCD.clear()\n",
    "segment = segments.set(i2c, address=0x77)\n",
    "led = neopixel_spi.NeoPixel_SPI(board.SPI(), 16, pixel_order=neopixel_spi.GRB)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#LED\n",
    "def get_rainbowcolor(n=10, end=3/4):\n",
    "    rgb_values=[]\n",
    "    for i in range(n):\n",
    "        rgb_values.append(tuple(round(i*30) for i in hls_to_rgb(end*i/(n-1), 0.5,1)))\n",
    "    return rgb_values\n",
    "\n",
    "led[:] = get_rainbowcolor(led.n)\n",
    "\n",
    "def bits_operation(pixels, direction, count):\n",
    "    items = deque(pixels)\n",
    "    if(direction == 1):\n",
    "        for i in range(count):\n",
    "            items.pop()\n",
    "            items.appendleft((0, 0, 0))\n",
    "    elif(direction == 2):\n",
    "        for i in range(count):\n",
    "            items.popleft()\n",
    "            items.append((0, 0, 0))\n",
    "    elif(direction == 3):\n",
    "        items.rotate(count)\n",
    "    elif(direction == 4):\n",
    "        items.rotate(-count)\n",
    "    pixels[:] = items"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "CLCD.setCursor(0,0)\n",
    "CLCD.display_string('Hello!')\n",
    "\n",
    "CLCD.setCursor(1,0)\n",
    "CLCD.display_string('Roulette Start!')\n",
    "\n",
    "segment.fill(0)\n",
    "\n",
    "segment.print(0)\n",
    "\n",
    "loopCount = 0\n",
    "\n",
    "#LED 세바퀴 돌기\n",
    "while(loopCount < 48):\n",
    "    bits_operation(led, 4, 1)\n",
    "    time.sleep(0.1)\n",
    "    loopCount = loopCount + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#입력값 소개\n",
    "CLCD.clear()\n",
    "\n",
    "CLCD.setCursor(0,0)\n",
    "CLCD.display_string('Bet red, blue')\n",
    "\n",
    "CLCD.setCursor(1,0)\n",
    "CLCD.display_string('Bet money')\n",
    "\n",
    "#LED 끄기\n",
    "led.fill((0, 0, 0))\n",
    "    \n",
    "#Bet 유형 입력\n",
    "x = input()\n",
    "money = int(input())\n",
    "\n",
    "\n",
    "\n",
    "CLCD.clear()\n",
    "\n",
    "CLCD.setCursor(0,0)\n",
    "CLCD.display_string((x))\n",
    "CLCD.setCursor(1,0)\n",
    "CLCD.display_string(str(money))\n",
    "\n",
    "#mymoney Seg에 표시\n",
    "mymoney = int(0 + money)\n",
    "\n",
    "segment.fill(0)\n",
    "segment.print(money)\n",
    "\n",
    "#룰렛 함수\n",
    "def spin(i):\n",
    "    led[i] = (0,0,0)\n",
    "        \n",
    "def Roulette():\n",
    "    ret = []\n",
    "    for i in range(0, 16):\n",
    "        if (i%2) == 0:\n",
    "            ret.append((5,0,0))\n",
    "            #led[i] = ((5,0,0))\n",
    "        elif (i%2) == 1:\n",
    "            ret.append((0,0,5))\n",
    "            #led[i] = ((0,0,5))\n",
    "    return ret\n",
    "            \n",
    "def go_round(pixels, now ,t):\n",
    "    items = deque(pixels)\n",
    "    while t <= 5:\n",
    "        led[:] = Roulette()\n",
    "        spin(now)\n",
    "        now += 1\n",
    "        if now == 16:\n",
    "            now = 0\n",
    "        time.sleep(t)\n",
    "        rand = random.randint(1, 10)\n",
    "        if t < 0.1:\n",
    "            t += 0.001 * rand\n",
    "        elif t <= 1:\n",
    "            t += 0.1 * rand\n",
    "        else:\n",
    "            t += 1\n",
    "    led[:] = Roulette()\n",
    "    spin(now)\n",
    "            \n",
    "now = 0\n",
    "\n",
    "#룰렛 돌리기\n",
    "go_round(led,0,0.02)\n",
    "\n",
    "#결과 출력\n",
    "CLCD.clear()\n",
    "CLCD.setCursor(0,0)\n",
    "CLCD.display_string('Game Set!')\n",
    "\n",
    "#판정\n",
    "\n",
    "isWin = False\n",
    "\n",
    "pan = Roulette()\n",
    "money = int(money)\n",
    "\n",
    "for i in range(0, 16):\n",
    "    \n",
    "    if led[i] == [0,0,0]:\n",
    "        if pan[i] == (5,0,0) and x == \"red\":\n",
    "            isWin = True\n",
    "            print(\"red\")\n",
    "            break\n",
    "        if pan[i] == (0,0,5) and x == \"blue\":\n",
    "            isWin = True\n",
    "            print(\"blue\")\n",
    "            break\n",
    "\n",
    "segment.fill(0)    \n",
    "\n",
    "if isWin:\n",
    "    CLCD.setCursor(1,0)\n",
    "    CLCD.display_string('You Win!')\n",
    "    money = money * 2\n",
    "else:\n",
    "    CLCD.setCursor(1,0)\n",
    "    CLCD.display_string('You lose TT')\n",
    "    money = 0\n",
    "    \n",
    "\n",
    "segment.print(money)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "8b95ba2ae8ff942e43e66b6c4fff1e9fcce946c42a08fa32fdbf585c98e4e6e9"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
